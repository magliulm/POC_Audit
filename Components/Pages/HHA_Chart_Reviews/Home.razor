@page "/HHA_Chart_Reviews"
@using Microsoft.EntityFrameworkCore
@using CHHA_PlanOfCorrectinAudit.Models
@inject IDbContextFactory<CHHA_PlanOfCorrectionAudit.Data.CHHA_PlanOfCorrectionAuditContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>HHA Chart Reviews</PageTitle>

<h1>HHA Chart Reviews</h1>

<p>
    <a class="btn btn-primary" href="/HHA_Chart_Reviews/create">Create New Review</a>
</p>

<div class="mb-3">
    <label><strong>Filter by Status:</strong></label><br />
    <InputRadioGroup @bind-Value="selectedStatus" Name="recordStatusFilter" class="form-check">
        <InputRadio class="form-check-input" Value="@( "all" )" />         <label class="form-check-label">All</label>
        <InputRadio class="form-check-input" Value="@( "submitted" )" />   <label class="form-check-label">Submitted</label>
        <InputRadio class="form-check-input" Value="@( "draft" )" />       <label class="form-check-label">Draft</label>


    </InputRadioGroup>
</div>

@if (isLoading) {
    <p><em>Loading...</em></p>
} else if (FilteredRecords?.Any() != true) {
    <p>No records found.</p>
} else {
    <table class="table table-striped">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.Patient_MRN))" style="cursor:pointer">
                    Patient MRN @SortArrow(nameof(ChartReviewListItem.Patient_MRN))
                </th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.Patient_Name))" style="cursor:pointer">
                    Patient Name @SortArrow(nameof(ChartReviewListItem.Patient_Name))
                </th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.Start_of_Care_Date))" style="cursor:pointer">
                    Start of Care Date @SortArrow(nameof(ChartReviewListItem.Start_of_Care_Date))
                </th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.Assigned_Reviewer))" style="cursor:pointer">
                    Assigned Reviewer @SortArrow(nameof(ChartReviewListItem.Assigned_Reviewer))
                </th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.DateOfReview))" style="cursor:pointer">
                    Date of Review @SortArrow(nameof(ChartReviewListItem.DateOfReview))
                </th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.ReviewerNotes))" style="cursor:pointer">
                    Reviewer Notes @SortArrow(nameof(ChartReviewListItem.ReviewerNotes))
                </th>
                <th>Actions</th>
                <th @onclick="() => SortBy(nameof(ChartReviewListItem.RecordStatus))" style="cursor:pointer">
                    Status @SortArrow(nameof(ChartReviewListItem.RecordStatus))
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in FilteredRecords) {
                <tr>
                    <td>@record.Patient_MRN</td>
                    <td>@record.Patient_Name</td>
                    <td>@record.Start_of_Care_Date?.ToString("yyyy-MM-dd")</td>
                    <td>@record.Assigned_Reviewer</td>
                    <td>@record.DateOfReview</td>
                    <td>@record.ReviewerNotes</td>
                    <td>
                        <a class="btn btn-sm btn-info" href="/details/@record.RecordId">View</a>
                        <a class="btn btn-sm btn-warning" href="/edit/@record.RecordId">Edit</a>
                    </td>
                    <td>
                        @if (record.RecordStatus == "draft") {
                            <span title="Draft" style="color: orange;">📝</span>
                        } else if (record.RecordStatus == "submitted") {
                            <span title="Submitted" style="color: green;">✔️</span>
                        } else {
                            <span title="Unknown" style="color: gray;">❓</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = true;

    private string currentSortColumn = nameof(ChartReviewListItem.LastUpdated);
    private bool sortAscending = false;

    private class ChartReviewListItem {
        public Guid RecordId { get; set; }
        public string Patient_MRN { get; set; } = "";
        public string Patient_Name { get; set; } = "";
        public DateOnly? Start_of_Care_Date { get; set; }
        public string Assigned_Reviewer { get; set; } = "";
        public string? DateOfReview { get; set; }
        public string? ReviewerNotes { get; set; }
        public string RecordStatusRaw { get; set; } = "unknown";
        public string RecordStatus => RecordStatusRaw?.Trim().ToLowerInvariant() ?? "unknown";
        public DateTime? LastUpdated { get; set; }
    }

    private List<ChartReviewListItem> records = new();
    private string selectedStatus = "all"; // "all", "submitted", or "draft"

    private IEnumerable<ChartReviewListItem> FilteredRecords =>
        selectedStatus switch {
            "submitted" => records.Where(r => r.RecordStatus == "submitted"),
            "draft" => records.Where(r => r.RecordStatus == "draft"),
            _ => records
        };

    protected override async Task OnInitializedAsync() {
        isLoading = true;
        try {
            using var context = DbFactory.CreateDbContext();

            var metadataList = await context.CHHA_Quality_POC_Metadata
                .Where(m => m.Form == "HHA Chart Reviews")
                .ToListAsync();

            var metadataIds = metadataList.Select(m => m.Id).ToList();

            var responses = await context.CHHA_Quality_POC_Responses
                .Where(r => metadataIds.Contains(r.MetadataId) &&
                            (r.Question == "DateOfReview" || r.Question == "ReviewerNotes"))
                .ToListAsync();

            var list = metadataList.Select(meta => new ChartReviewListItem {
                    RecordId = meta.RecordId,
                    Patient_MRN = meta.Patient_MRN,
                    Patient_Name = meta.Patient_Name,
                    Start_of_Care_Date = meta.Start_of_Care_Date,
                    Assigned_Reviewer = meta.Assigned_Reviewer,
                    DateOfReview = responses.FirstOrDefault(r => r.MetadataId == meta.Id && r.Question == "DateOfReview")?.Response,
                    ReviewerNotes = responses.FirstOrDefault(r => r.MetadataId == meta.Id && r.Question == "ReviewerNotes")?.Response,
                    RecordStatusRaw = meta.RecordStatus ?? "unknown",
                    LastUpdated = meta.LastUpdated
                });

            records = list.ToList();
            ApplySort();
        } finally {
            isLoading = false;
        }
    }

    private void SortBy(string columnName) {
        if (currentSortColumn == columnName) {
            sortAscending = !sortAscending;
        } else {
            currentSortColumn = columnName;
            sortAscending = true;
        }
        ApplySort();
    }

    private void ApplySort() {
        if (records == null) return;

        records = currentSortColumn switch {
            nameof(ChartReviewListItem.Patient_MRN) => sortAscending
                ? records.OrderBy(r => r.Patient_MRN).ToList()
                : records.OrderByDescending(r => r.Patient_MRN).ToList(),

            nameof(ChartReviewListItem.Patient_Name) => sortAscending
                ? records.OrderBy(r => r.Patient_Name).ToList()
                : records.OrderByDescending(r => r.Patient_Name).ToList(),

            nameof(ChartReviewListItem.Start_of_Care_Date) => sortAscending
                ? records.OrderBy(r => r.Start_of_Care_Date).ToList()
                : records.OrderByDescending(r => r.Start_of_Care_Date).ToList(),

            nameof(ChartReviewListItem.Assigned_Reviewer) => sortAscending
                ? records.OrderBy(r => r.Assigned_Reviewer).ToList()
                : records.OrderByDescending(r => r.Assigned_Reviewer).ToList(),

            nameof(ChartReviewListItem.DateOfReview) => sortAscending
                ? records.OrderBy(r => r.DateOfReview).ToList()
                : records.OrderByDescending(r => r.DateOfReview).ToList(),

            nameof(ChartReviewListItem.ReviewerNotes) => sortAscending
                ? records.OrderBy(r => r.ReviewerNotes).ToList()
                : records.OrderByDescending(r => r.ReviewerNotes).ToList(),

            nameof(ChartReviewListItem.RecordStatus) => sortAscending
                ? records.OrderBy(r => r.RecordStatus).ToList()
                : records.OrderByDescending(r => r.RecordStatus).ToList(),

            nameof(ChartReviewListItem.LastUpdated) or _ => sortAscending
                ? records.OrderBy(r => r.LastUpdated).ToList()
                : records.OrderByDescending(r => r.LastUpdated).ToList(),
        };
    }

    private RenderFragment SortArrow(string columnName) => builder => {
        if (currentSortColumn == columnName) {
            var arrow = sortAscending ? "▲" : "▼";
            builder.AddContent(0, $" {arrow}");
        }
    };
}
