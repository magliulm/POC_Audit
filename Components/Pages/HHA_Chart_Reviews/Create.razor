@page "/HHA_Chart_Reviews/create_original"
@using Microsoft.EntityFrameworkCore
@using CHHA_PlanOfCorrectinAudit.Models
@using CHHA_PlanOfCorrectinAudit.ViewModel
@inject IDbContextFactory<CHHA_PlanOfCorrectionAudit.Data.CHHA_PlanOfCorrectionAuditContext> DbFactory
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Create</PageTitle>

<h2>CHHA Quality POC form</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="formModel" OnValidSubmit="AddFormData" FormName="create" Enhance>

            <!-- Form Fields -->

            <div class="mb-3">
                <label for="Patient_MRN" class="form-label">Patient MRN:</label>
                <InputText id="Patient_MRN" @bind-Value="formModel.Patient_MRN" class="form-control" />
                <ValidationMessage For="() => formModel.Patient_MRN" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="patient_Name" class="form-label">Patient Name:</label>
                <InputText id="patient_Name" @bind-Value="formModel.Patient_Name" class="form-control" />
                <ValidationMessage For="() => formModel.Patient_Name" class="text-danger" />
            </div>
           
            <div class="mb-3">
                <label for="Patient_Status" class="form-label">"Patient Status:</label>
                <InputText id="Patient_Status" @bind-Value="formModel.Patient_Status" class="form-control" />
                <ValidationMessage For="() => formModel.Patient_Status" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Program" class="form-label">Program:</label>
                <InputText id="Program" @bind-Value="formModel.Program" class="form-control" />
                <ValidationMessage For="() => formModel.Program" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Borough_of_Care" class="form-label">Borough of Care:</label>
                <InputText id="Borough_of_Care" @bind-Value="formModel.Borough_of_Care" class="form-control" />
                <ValidationMessage For="() => formModel.Borough_of_Care" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Start_of_Care_Date" class="form-label">Start of Care Date:</label>
                <InputDate @bind-Value="formModel.Start_of_Care_Date" id="Start_of_Care_Date" class="form-control" />
                <ValidationMessage For="() => formModel.Start_of_Care_Date" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Financial_Class" class="form-label">Financial Class:</label>
                <InputText id="Financial_Class" @bind-Value="formModel.Financial_Class" class="form-control" />
                <ValidationMessage For="() => formModel.Financial_Class" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Payer" class="form-label">Payer:</label>
                <InputText id="Payer" @bind-Value="formModel.Payer" class="form-control" />
                <ValidationMessage For="() => formModel.Payer" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Category" class="form-label">Category:</label>
                <InputText id="Category" @bind-Value="formModel.Category" class="form-control" />
                <ValidationMessage For="() => formModel.Category" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Assigned_Reviewer" class="form-label">Assigned Reviewer:</label>
                <InputText id="Assigned_Reviewer" @bind-Value="formModel.Assigned_Reviewer" class="form-control" />
                <ValidationMessage For="() => formModel.Assigned_Reviewer" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Date_Assigned" class="form-label">Date Assigned:</label>
                <InputDate @bind-Value="formModel.Date_Assigned" id="Date_Assigned" class="form-control" />
                <ValidationMessage For="() => formModel.Date_Assigned" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Date of Review:</label>
                <InputDate @bind-Value="formModel.DateOfReview" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Date of Review (Completion):</label>
                <InputDate @bind-Value="formModel.DateOfReviewCompletion" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Episode Discharge Date:</label>
                <InputDate @bind-Value="formModel.EpisodeDischargeDate" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Is the frequency/ duration of HHA service present?</label>
                <InputText @bind-Value="formModel.FrequencyDurationPresent" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Are the duties/ interventions checked off on the HHA POC?</label>
                <InputText @bind-Value="formModel.DutiesCheckedOnPOC" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Do the duties/ interventions have a frequency?</label>
                <InputText @bind-Value="formModel.DutiesHaveFrequency" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Does the diet on the HHA POC reflect the diet/ restrictions on the Start of Care (485)?</label>
                <InputText @bind-Value="formModel.DietMatch485" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Is the HHA POC signed by the nurse?</label>
                <InputText @bind-Value="formModel.POCSignedByNurse" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Do the Duty Sheets Reflect Individualized Tasks Performed as Ordered?</label>
                <InputText @bind-Value="formModel.IndividualizedTasks" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Is there documentation of HHA supervision every 14 days?</label>
                <InputText @bind-Value="formModel.SupervisionEvery14Days" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Reviewer Notes:</label>
                <InputTextArea @bind-Value="formModel.ReviewerNotes" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Chart Review Outcome:</label>
                <InputText @bind-Value="formModel.ChartReviewOutcome" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Involved Staff (First Initial, Last Name):</label>
                <InputText @bind-Value="formModel.InvolvedStaff" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Column3:</label>
                <InputText @bind-Value="formModel.Column3" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Overseeing Manager (of Care Episode):</label>
                <InputText @bind-Value="formModel.OverseeingManager" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Date of Escalation to Responsible Manager (Inform Manager of Gap):</label>
                <InputDate @bind-Value="formModel.DateEscalated" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Additional Notes:</label>
                <InputTextArea @bind-Value="formModel.AdditionalNotes" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Corrected Staff Name:</label>
                <InputText @bind-Value="formModel.CorrectedStaffName" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/metadata">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private FormInputModel_HHA formModel { get; set; } = new();

    protected override void OnInitialized() {
        Console.WriteLine("✅ THIS IS A TEST Console.WriteLine OUTPUT for form");
        formModel.FormName = "HHA Chart Reviews";

        // Key can be calculated or left empty as you use it in your logic
        formModel.Key = $"{formModel.Patient_MRN}_{formModel.FormName}_{formModel.Date_Assigned.ToString("yyyy-MM-dd")}";
    }

    private CHHA_Quality_POC_Responses CreateResponse(string question, string? response, CHHA_Quality_POC_Metadata metadata, Guid recordId, string username) {
        return new CHHA_Quality_POC_Responses {
                Patient_MRN = formModel.Patient_MRN,
                Date_Assigned = formModel.Date_Assigned,
                Question = question,
                Response = response,
                MetadataId = metadata.Id,
                Form = formModel.FormName,
                Key = $"{formModel.Patient_MRN}_{formModel.FormName}_{formModel.Date_Assigned.ToString("yyyy-MM-dd")}",
                CreatedBy = username,
                CreatedDate = DateTime.UtcNow,
                LastUpdatedBy = username,
                LastUpdated = DateTime.UtcNow,
                OriginalRecordId = recordId,
                RecordId = recordId,
                IsCurrentVersion = true
            };
    }

    // private void AddFormData() {
    private async Task AddFormData() {

        Console.WriteLine("Form submission started");

        // Log form data to verify (whether valid or not)

        var username = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? "UnknownUser";
        var newRecordId = Guid.NewGuid();

        using var context = DbFactory.CreateDbContext();

        var metadata = await context.CHHA_Quality_POC_Metadata
            .FirstOrDefaultAsync(m => m.Patient_MRN == formModel.Patient_MRN);

        if (metadata == null) {
            metadata = new CHHA_Quality_POC_Metadata {
                    Patient_MRN = formModel.Patient_MRN,
                    Patient_Name = formModel.Patient_Name,
                    Patient_Status = formModel.Patient_Status,
                    Program = formModel.Program,
                    Borough_of_Care = formModel.Borough_of_Care,
                    Start_of_Care_Date = formModel.Start_of_Care_Date,
                    Financial_Class = formModel.Financial_Class,
                    Payer = formModel.Payer,
                    Category = formModel.Category,
                    Assigned_Reviewer = formModel.Assigned_Reviewer,
                    Date_Assigned = formModel.Date_Assigned,
                    Form = formModel.FormName,
                    Key = $"{formModel.Patient_MRN}_{formModel.FormName}_{formModel.Date_Assigned.ToString("yyyy-MM-dd")}",

                    // Audit fields here:
                    CreatedBy = username,
                    CreatedDate = DateTime.UtcNow,
                    LastUpdatedBy = username,
                    LastUpdated = DateTime.UtcNow,
                    OriginalRecordId = newRecordId,
                    RecordId = newRecordId,
                    IsCurrentVersion = true

                };

            context.CHHA_Quality_POC_Metadata.Add(metadata);
            await context.SaveChangesAsync();
        }

        var responses = new List<CHHA_Quality_POC_Responses>{
        CreateResponse("DateOfReview", formModel.DateOfReview?.ToString("yyyy-MM-dd"), metadata, newRecordId, username),
        CreateResponse("DateOfReviewCompletion", formModel.DateOfReviewCompletion?.ToString("yyyy-MM-dd"), metadata, newRecordId, username),
        CreateResponse("EpisodeDischargeDate", formModel.EpisodeDischargeDate?.ToString("yyyy-MM-dd"), metadata, newRecordId, username),
        CreateResponse("FrequencyDurationPresent", formModel.FrequencyDurationPresent, metadata, newRecordId, username),
        CreateResponse("DutiesCheckedOnPOC", formModel.DutiesCheckedOnPOC, metadata, newRecordId, username),
        CreateResponse("DutiesHaveFrequency", formModel.DutiesHaveFrequency, metadata, newRecordId, username),
        CreateResponse("DietMatch485", formModel.DietMatch485, metadata, newRecordId, username),
        CreateResponse("POCSignedByNurse", formModel.POCSignedByNurse, metadata, newRecordId, username),
        CreateResponse("IndividualizedTasks", formModel.IndividualizedTasks, metadata, newRecordId, username),
        CreateResponse("SupervisionEvery14Days", formModel.SupervisionEvery14Days, metadata, newRecordId, username),
        CreateResponse("ReviewerNotes", formModel.ReviewerNotes, metadata, newRecordId, username),
        CreateResponse("ChartReviewOutcome", formModel.ChartReviewOutcome, metadata, newRecordId, username),
        CreateResponse("InvolvedStaff", formModel.InvolvedStaff, metadata, newRecordId, username),
        CreateResponse("Column3", formModel.Column3, metadata, newRecordId, username),
        CreateResponse("OverseeingManager", formModel.OverseeingManager, metadata, newRecordId, username),
        CreateResponse("DateEscalated", formModel.DateEscalated?.ToString("yyyy-MM-dd"), metadata, newRecordId, username),
        CreateResponse("AdditionalNotes", formModel.AdditionalNotes, metadata, newRecordId, username),
        CreateResponse("CorrectedStaffName", formModel.CorrectedStaffName, metadata, newRecordId, username)
        };

        context.CHHA_Quality_POC_Responses.AddRange(responses);
        await context.SaveChangesAsync();

        Console.WriteLine("Form submission successful");

        NavigationManager.NavigateTo("/HHA_Chart_Reviews");

    }
}
